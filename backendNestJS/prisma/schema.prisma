
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Marques {
  marque_id      Int      @id @default(autoincrement())
  marque_libelle String
  marque_actif   Boolean?
  articles       Articles[]
}

model Fournisseurs {
  fournisseur_id      Int      @id @default(autoincrement())
  fournisseur_nom     String
  fournisseur_adresse String
  fournisseur_tva     String
  fournisseur_tel     String
  fournisseur_email   String
  fournisseur_actif   Boolean?
  articles            Articles[]
}

model Categories {
  categorie_id      Int       @id @default(autoincrement())
  categorie_libelle String
  categorie_id_lie  Int
  categorie_actif   Boolean?
  articles          Articles[]
  category          Categories? @relation("CategoryToCategory", fields: [categorie_id_lie], references: [categorie_id])
  categories        Categories[] @relation("CategoryToCategory")
}

model Tva {
  tva_id      Int      @id @default(autoincrement())
  tva_pct     Float?
  tva_libelle String
  articles    Articles[]
}

model Articles {
  article_id            Int              @id @default(autoincrement())
  article_intitule      String
  article_code_barre    String?
    article_prix          Decimal?         @db.Decimal(10, 0)
  article_tva           Int
  article_marque        Int
  article_categorie     Int
  article_description   String
   article_url           String?
  article_poids         String?
  article_longeur       String?
  article_largeur       String?
  article_hauteur       String?
  article_actif         Boolean?
  article_fournisseur_id Int
  Article_prix          Article_prix[]
  stocks                Stocks[]
  fournisseurs           Fournisseurs     @relation(fields: [article_fournisseur_id], references: [fournisseur_id])
  marques                Marques          @relation(fields: [article_marque], references: [marque_id])
  categories             Categories       @relation(fields: [article_categorie], references: [categorie_id])
  tva                   Tva              @relation(fields: [article_tva], references: [tva_id])
  lignes                 Ligne[]
}

model Article_prix {
  article_prix_id  Int    @id @default(autoincrement())
  article_prix_libelle String
  article_prix_actif Boolean?
  article_id       Int
  articles          Articles @relation(fields: [article_id], references: [article_id])
}

model Mouvement_stock {
  mouvement_id      Int      @id @default(autoincrement())
  mouvement_libelle String
  stocks            Stocks[]
}

model Entrepots {
  entrepot_id      Int      @id @default(autoincrement())
  entrepot_libelle String
  entreport_actif  Boolean?
  stocks           Stocks[]
}

model Stocks {
  stock_id           Int      @id @default(autoincrement())
  stock_article_id   Int
  stock_quantite     Int
  stock_mouvement    Int
  stock_entrepot     Int
  stock_date_mouvement DateTime?
  articles            Articles @relation(fields: [stock_article_id], references: [article_id])
  mouvement_stocks    Mouvement_stock @relation(fields: [stock_mouvement], references: [mouvement_id])
  entrepots           Entrepots @relation(fields: [stock_entrepot], references: [entrepot_id])
}

model Commande_statuts {
  commande_statut_id  Int      @id @default(autoincrement())
  commande_statut_libelle String
  commande_statut_actif Boolean?
  commandes           Commandes[]
}

model Roles {
  role_id     Int      @id @default(autoincrement())
  role_libelle String
  role_actif  Boolean?
  utilisateurs Utilisateurs[]
}

model Utilisateurs {
  utilisateur_id       Int      @id @default(autoincrement())
  utilisateur_nom      String
  utilisateur_prenom   String
  utilisateur_date_naissance DateTime
   utilisateur_email                       String            @unique @db.VarChar(100)
  utilisateur_mdp      String
  utilisateur_role_id  Int
  utilisateur_gsm      String
  utilisateur_actif    Boolean?
  confirmationMailToken        String?           @db.VarChar(500)
  confirmationMailTokenExpires DateTime?
   verifiedMail                 Boolean? 
     refreshToken                 String?           @db.VarChar(500) // Refresh token pour l'utilisateur
    tokenVersion                 Int               @default(1)
  adresses             Adresses[]
  commandes            Commandes[]
  roles                 Roles @relation(fields: [utilisateur_role_id], references: [role_id])
}

model Adresse_type {
  adresse_type_id     Int      @id @default(autoincrement())
  adresse_type_libelle String
  adresse_type_actif  Boolean?
  adresses            Adresses[]
}

model Adresses {
  adresse_id      Int      @id @default(autoincrement())
  utilisateur_id  Int
  adresse_rue     String
  adresse_numero  String
  adresse_boite   String
  adresse_cp      String
  adresse_ville   String
  adresse_pays    String
  adresse_type    Int
  utilisateurs     Utilisateurs @relation(fields: [utilisateur_id], references: [utilisateur_id])
  adresseTypes     Adresse_type @relation(fields: [adresse_type], references: [adresse_type_id])
  livraisons      Livraisons[]
  factures        Factures[]
}

model Livraison_statuts {
  livraison_statut_id  Int      @id @default(autoincrement())
  livraison_statut_libelle String
  livraison_statut_actif Boolean?
  livraisons           Livraisons[]
}

model Livraisons {
  livraison_id     Int      @id @default(autoincrement())
  livraison_date   DateTime?
  livraison_statut Int
  livraison_adresse Int
  adresses          Adresses @relation(fields: [livraison_adresse], references: [adresse_id])
  livraisonStatuts  Livraison_statuts @relation(fields: [livraison_statut], references: [livraison_statut_id])
  commandes        Commandes[]
}

model Commandes {
  commande_id            Int      @id @default(autoincrement())
  commande_utilisateur_id Int
  commande_total         Float?
  commande_statut        Int
  commande_date          DateTime @default(now())
  commande_livraison_id  Int
  utilisateurs            Utilisateurs @relation(fields: [commande_utilisateur_id], references: [utilisateur_id])
  commandeStatut         Commande_statuts @relation(fields: [commande_statut], references: [commande_statut_id])
  livraisons              Livraisons @relation(fields: [commande_livraison_id], references: [livraison_id])
  lignes                 Ligne[]
  factures               Factures[]
}

model Moyens_paiement {
  moyen_paiement_id    Int      @id @default(autoincrement())
  moyen_paiement_libelle String
  moyen_paiement_actif Boolean?
  factures             Factures[]
}

model Facture_statuts {
  facture_statut_id    Int      @id @default(autoincrement())
  facture_statut_libelle String
  facture_statut_actif Boolean?
  factures             Factures[]
}

model Factures {
  facture_id        Int      @id @default(autoincrement())
  commande_id       Int
  facture_statut_id Int
  facture_adresse_id Int
  date_creation     DateTime?
  date_paiement     DateTime?
  date_maj          DateTime @default(now())
  facture_moyen_paiement_id Int
  commandes          Commandes @relation(fields: [commande_id], references: [commande_id])
  adresses           Adresses @relation(fields: [facture_adresse_id], references: [adresse_id])
  factureStatuts     Facture_statuts @relation(fields: [facture_statut_id], references: [facture_statut_id])
  moyenPaiements     Moyens_paiement @relation(fields: [facture_moyen_paiement_id], references: [moyen_paiement_id])
}

model Magasins {
  magasin_id      Int      @id @default(autoincrement())
  magasin_nom     String
  magasin_adresse String
  magasin_tel     String
  employes        Employes[]
}

model Ligne {
  ligne_id          Int      @id @default(autoincrement())
  commande_id       Int
  article_id        Int
  ligne_quantite    Int
  ligne_prix_unitaire Float?
  ligne_prix_total  Float?
  articles          Articles @relation(fields: [article_id], references: [article_id])
  commandes          Commandes @relation(fields: [commande_id], references: [commande_id])
}

model Employes {
  employe_id          Int      @id @default(autoincrement())
  employe_nom         String
  employe_prenom      String
  employe_date_naissance DateTime?
  employe_actif       Boolean?
  employe_magasin     Int
  magasins             Magasins @relation(fields: [employe_magasin], references: [magasin_id])
  contrats            Contrats[]
}

model Contrat_types {
  contrat_type_id    Int      @id @default(autoincrement())
  contrat_type_libelle String
  contrat_type_actif Boolean?
  contrats           Contrats[]
}

model Contrats {
  contrat_id       Int      @id @default(autoincrement())
  contrat_date_debut DateTime
  contrat_date_fin   DateTime
  contrat_type     Int
  employe_id       Int
  contrant_salaire Float?
  employes          Employes @relation(fields: [employe_id], references: [employe_id])
  contratTypes      Contrat_types @relation(fields: [contrat_type], references: [contrat_type_id])
}


